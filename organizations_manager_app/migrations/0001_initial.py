# Generated by Django 4.2.20 on 2025-03-19 06:33

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ContactInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('person', models.CharField(blank=True, max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='FundingInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sources', models.JSONField(default=list)),
                ('revenue', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Industry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nace_code', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state_region', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('zip_postal_code', models.CharField(blank=True, max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='OwnershipStructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SocialLinks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('website', models.URLField(blank=True)),
                ('twitter', models.URLField(blank=True)),
                ('linkedin', models.URLField(blank=True)),
                ('discord', models.URLField(blank=True)),
                ('github', models.URLField(blank=True)),
                ('other', models.URLField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='TokenInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100)),
                ('symbol', models.CharField(blank=True, max_length=20)),
                ('blockchain', models.CharField(blank=True, max_length=50)),
                ('governance', models.CharField(blank=True, max_length=100)),
                ('contract', models.URLField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, validators=[django.core.validators.MaxLengthValidator(2000)])),
                ('type', models.CharField(choices=[('cooperative', 'Cooperative'), ('employee_owned', 'Employee-Owned'), ('dao', 'DAO'), ('crypto_web3', 'Crypto/Web3'), ('esop', 'ESOP'), ('platform_coop', 'Platform Cooperative'), ('community_trust', 'Community Trust'), ('hybrid', 'Hybrid'), ('other', 'Other')], max_length=50)),
                ('legal_structure', models.CharField(choices=[('llc', 'LLC'), ('corporation', 'Corporation'), ('cooperative', 'Cooperative'), ('dao', 'DAO'), ('foundation', 'Foundation'), ('trust', 'Trust'), ('nonprofit', 'Nonprofit'), ('hybrid', 'Hybrid'), ('other', 'Other')], max_length=50)),
                ('year_founded', models.IntegerField(blank=True, null=True)),
                ('geo_scope', models.CharField(choices=[('local', 'Local'), ('regional', 'Regional'), ('national', 'National'), ('global', 'Global'), ('virtual', 'Virtual')], max_length=50)),
                ('size', models.CharField(choices=[('micro', 'Micro'), ('small', 'Small'), ('medium', 'Medium'), ('large', 'Large')], max_length=50)),
                ('members', models.IntegerField(blank=True, null=True)),
                ('governance', models.CharField(blank=True, choices=[('direct', 'Direct Democracy'), ('representative', 'Representative Democracy'), ('token', 'Token-Based'), ('hybrid', 'Hybrid'), ('board', 'Board'), ('sociocratic', 'Sociocratic'), ('other', 'Other')], max_length=50)),
                ('certifications', models.JSONField(default=list)),
                ('tags', models.JSONField(default=list)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='organizations_manager_app.contactinformation')),
                ('funding', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='organizations_manager_app.fundinginformation')),
                ('industry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='organizations_manager_app.industry')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='organizations_manager_app.location')),
                ('ownership_structures', models.ManyToManyField(to='organizations_manager_app.ownershipstructure')),
                ('social', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='organizations_manager_app.sociallinks')),
                ('token', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='organizations_manager_app.tokeninformation')),
            ],
        ),
    ]
